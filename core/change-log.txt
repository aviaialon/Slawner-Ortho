2012-04-02
	- Added lite version of the geo_locator class (GEO_LOCATOR_LITE)

2012-04-01
	- Added a core component class callback from request dispatcher using the '/callback/' url path
	- Added search features to shared objects
	- Added sql or array return to class object view (shared objects)
	- Refactored the inner and left joins from classObjectView
	
2011-09-18
	- added the __call method in SHARED_OBJECT for variables getters and setters.	
	
2011-10-24
	- Added Cryptolopgy features to the core.
	- Added database crypting feature in DATABASE
	- Added loadSharedObject() in SHARED_OBJECTS
	- Fixed a bug in SHARED_OBJECTS (newInstance()): wasnt optimised and the code didnt call the 'on' before / after event handlers. 	
	
2011-10-25
	- Added payPal oAuth login	

2011-10-26
	- Fixed the site_users object to restrict directories based on URL rewrites as well	
	
2011-10-28
	- Fixed a SITE_USERS::secure() directory comparaison issue. becauswe using $_SERVER['REQUEST_URI'] instead of $_SERVER['REDIRECT_URL']
	  would add the query string to the directory compare when using URL rewrite EX: /users/profile?QPAY_SESS=saddgf89a7gf9sdf instead of /users/profile
	- Beefed up the error handler to manage individual types of error types
	- Beefed up the request dispatcher to use DOMDocument for analytics and meta.
	
	
2011-11-01
	- Added a better error message check in site_exception (@112)
	- Added ORDER BY {data} DESC in shared objects _getInstance so that if multiples are found, then the laatest is used.
	- Added getMultiInstance() in SHARED_OBJECT
	
2011-11-02
	- Added support for URL rewrites in PAGE_META (using $_SERVER['REQUEST_URI']

2011-11-04
	- Removed white space appended to the top of all pages (due to ini.php and config.php) which caused problems using set headers like image headers etc..
	
// --------------------------------------------------------------------------------------
									KNOWLEDGE BOARD
// --------------------------------------------------------------------------------------


** TODO:
	
	1. change the path of the shared objects to something like the config folder, out of the core of the library
	2. review SHARED_OBJECT class
	3. BUG: site_user_image the Source image (position 0) is not saved as base64 data in the database.
	4. Investigate encrypted data in the database.	



* * * All oAuth Login
SHARED_OBJECT::getObjectFromPackage(__APPLICATION_CLASS_PATH__ . "::OAUTH::OAUTH_AUTHENTICATION");		
$Application = APPLICATION::getInstance();
$objUser = $Application->getUser();

SHARED_OBJECT::getObjectFromPackage(__APPLICATION_CLASS_PATH__ . "::OAUTH::OAUTH_AUTHENTICATION");		
$objSession = SESSION::getInstance();

echo(isset($_GET['err']) ? '<br /> --' . $_GET['err'] : '');
echo('<br /><br />');

$authObjects = array();
foreach(OAUTH_AUTHENTICATION::getAvailableAuthMethods() as $strAuthMethod => $strAutmMethodName) {
	$authObjects[$strAutmMethodName] = OAUTH_AUTHENTICATION::getInstance($strAutmMethodName);  
	$authObjects[$strAutmMethodName]->setOpenIdEndPointUrl("http://qpay.dns05.com/users/");
	$authObjects[$strAutmMethodName]->setOpenIdUserName("adzaro");
	
	$objUrl = new URL();
	$objUrl->setPath('/users/');
	$objUrl->setAttribute('oAuth', 'true');
	$objUrl->setAttribute('authMethod', $authObjects[$strAutmMethodName]->getAuthMode());
	$objUrl->addSessionAttributes();
	echo ('<a href="' . $objUrl->build() . '">Login with ' . $authObjects[$strAutmMethodName]->getAuthMode() . '</a><br />');	
}
if (isset($_GET['authMethod']) || $objSession->get('authMethod')) {
	if (isset($_GET['authMethod']))
		$objSession->set('authMethod', $_GET['authMethod']);
	$authObjects[isset($_GET['authMethod']) ? $_GET['authMethod'] : $objSession->get('authMethod')]->authenticate();	
}

if ($objUser->getId()) 
	echo ('<br /><a href="?logout">Logout ' . $objUser->getVariable('username') . '</a><br />');

echo ('<br />');
new dump($objUser->getVariable());
new dump($_SESSION);
die;



* * * Posting stuff to a wall after facebok login:
try
{
	SHARED_OBJECT::getObjectFromPackage(__APPLICATION_CLASS_PATH__ . "::OAUTH::FACEBOOK::FACEBOOK");
	$Application 	= APPLICATION::getInstance();
	$objUser		= $Application->getUser();
	$facebook 		= Facebook::getInstance();
	
	$objUser->requireLogin();
	
	# Let's see if we have an active session
	$session = $facebook->getSession();
	
	$attachment =  array(
		'access_token' => $session['access_token'],
		'message' => $objUser->getFirst_Name() . " Just Logged into QPay!",
		'name' => "QPay",
		'link' => "http://qpay.dns05.com",
		'description' => "<b>This is autogenerated.</b>",
		'picture'=> "http://gsmchicago.com/wp-content/uploads/QPayLogo.jpg"
	);  
	//$facebook->api("/".$session['uid']."/feed", "post", $attachment);	
	print "Message Posted!";
	
	$friends = $facebook->api('/me/friends');
	foreach ($friends as $key=>$value) {
		echo 'You have ' . count($value) . ' friends<br />';

		foreach ($value as $fkey=>$fvalue) {
			echo 'friend id = ' . $fvalue['id'] . ' - friend name = ' . $fvalue['name'] . ' - <a href="/stage2.php?id=' . $fvalue['id'] . '">post message</a><br />';
		}
	}
	
	
	$attachment =  array(
		'access_token' => $session['access_token'],
		'message' => $objUser->getFirst_Name() . " Just Logged into QPay!",
		'name' => "QPay",
		'link' => "http://qpay.dns05.com",
		'description' => "<b>This is autogenerated.</b>",
		'picture'=> "http://gsmchicago.com/wp-content/uploads/QPayLogo.jpg"
	);  
	//$facebook->api("/1159944477/feed", "post", $attachment);	
	echo("Friend Message Posted");
} 
catch (FacebookApiException $e) 
{
	$loginUrl = $facebook->getLoginUrl(array(
	   'canvas' 		=> 1,
	   'fbconnect' 		=> 0,
	   'req_perms' 		=> 'publish_stream',
	   'next' 			=> 'http://qpay.dns05.com/users/test',
	   'cancel_url' 	=> 'http://qpay.dns05.com'
	));
	header('Location: '.$loginUrl);
}