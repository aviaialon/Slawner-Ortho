<?php
/**
 * PAYPAL_API Administration Class
 * This class represents the CRUD [Hybernate] behaviors implemented 
 * with the Hybernate framework 
 *
 * @package		CLASSES::PAYMENT::PAYPAL_API
 * @subpackage	OBJECT_BASE
 * @author      Avi Aialon <aviaialon@gmail.com>
 * @copyright	2010 Deviant Logic. All Rights Reserved
 * @license		http://www.deviantlogic.ca/license
 * @version		SVN: $Id$
 * @link		SVN: $HeadURL$
 * @since		12:35:53 PM
 *
 */	
require_once(__APPLICATION_ROOT__ . '/crypt/aes_crypto.php');

class PAYPAL_API extends OBJECT_BASE 
{
	/**
	 * API user: The user that is identified as making the call. you can
	 * also use your own API username that you created on PayPal's sandbox
	 * or the PayPal live site
	 */
	const PAYPAL_API_USERNAME	=	'platfo_1255077030_biz_api1.gmail.com';
	
	/**
	 * API_password: The password associated with the API user
	 * If you are using your own API username, enter the API password that
	 * was generated by PayPal below
	 *	 IMPORTANT - HAVING YOUR API PASSWORD INCLUDED IN THE MANNER IS NOT
	 *	 SECURE, AND ITS ONLY BEING SHOWN THIS WAY FOR TESTING PURPOSES
	 */
	const PAYPAL_API_PASSWORD	=	'1255077037';
	
   /**
	* API_Signature:The Signature associated with the API user. which is generated by paypal.
	*/
	const PAYPAL_API_SIGNATURE	= 'Abg0gYcQyxQvnf2HDJkKtA-p6pqhA1k-KTYE0Gcy1diujFio4io5Vqjf';
	
	/**
	 * Endpoint: this is the server URL which you have to connect for submitting your API request.
	 * 	LIVE: https://api-3t.paypal.com/nvp
	 *  SANDBOX: https://api-3t.sandbox.paypal.com/nvp
	 */
	const PAYPAL_API_ENPOINT 	= 'https://api-3t.sandbox.paypal.com/nvp'; 
	
	/**
	 * Define the PayPal URL. This is the URL that the buyer is
   	 * first sent to to authorize payment with their paypal account
   	 * change the URL depending if you are testing on the sandbox
   	 * or going to the live PayPal site
   	 * For the sandbox, the URL is
   	 *		https://www.sandbox.paypal.com/webscr&cmd=_express-checkout&token=
   	 * For the live site, the URL is
   	 *		https://www.paypal.com/webscr&cmd=_express-checkout&token=
	 */
	const PAYPAL_API_URL 	= 'https://www.sandbox.paypal.com/webscr&cmd=_express-checkout&token=';
	
	/**
	 * Third party Email address that you granted permission to make api call.
	 * 		for permission APIs ->token, signature, timestamp  are needed
	 *			define('AUTH_TOKEN',"4oSymRbHLgXZVIvtZuQziRVVxcxaiRpOeOEmQw");
	 *			define('AUTH_SIGNATURE',"+q1PggENX0u+6vj+49tLiw9CLpA=");
	 *			define('AUTH_TIMESTAMP',"1284959128");
	 */
	const PAYPAL_API_SUBJECT 	= '';
	
	/**
	 * USE_PROXY: Set this variable to TRUE to route all the API requests through proxy. like define('USE_PROXY',TRUE);
	 */
	const PAYPAL_API_USE_PROXY = FALSE;
	
	/**
	 * PROXY_HOST: Set the host name or the IP address of proxy server.
	 * PROXY_PORT: Set proxy port.
	 * PROXY_HOST and PROXY_PORT will be read only if USE_PROXY is set to TRUE
	 */
	const PAYPAL_API_PROXY_HOST = '127.0.0.1';
	const PAYPAL_API_PROXY_PORT = '808';
	
	/**
	 * Version: this is the API version in the request.
	 * It is a mandatory parameter for each API request.
	 * The only supported value at this time is 2.3
	 */
	const PAYPAL_API_VERSION 	= '65.1';
	
	/**
	 * Ack related response constants
	 */
	const PAYPAL_API_ACK_SUCCESS = 'SUCCESS';
	const PAYPAL_API_ACK_SUCCESS_WITH_WARNING = 'SUCCESSWITHWARNING';
	
	
	/**
	 * Direct Payments Available Configs
	 */
	
	const PAYPAL_API_DIRECTPAYMENT_TYPE_SALE 			= 'doDirectPayment'; 	// - Sale type 
	const PAYPAL_API_DIRECTPAYMENT_TYPE_AUTHORIZATION 	= 'DoAuthorization'; 	// - Just Authorization
	
	const PAYPAL_API_DIRECTPAYMENT_CURRENCY_USD			= 'USD';			 	// - Default US Currency	
	
	/**
	 * Array Container of the order data
	 * 
	 * @var 	Array
	 * @access 	Protected
	 */
	protected static $_PAYPAL_ORDER_DATA_BIN = array();
	
   /**
	* Array Container for errors
	*
	* @var 		Array
	* @access 	Protected
	*/
	protected static $_PAYPAL_API_ERROR_BIN = array();
	
   /**
	* Array Container for PayPal API Response
	*
	* @var 		Array
	* @access 	Protected
	*/
	protected static $_PAYPAL_API_RESPONSE = array();
	
   /**
	* AES Crypto tool for data transfer within object
	*
	* @var CRYPT::AES_CRYPTO
	* @access Protected
	*/
	protected static $_PAYPAL_AES_CRYPT 	= NULL;
	
	/**
	 * This method processes a direct payment using paypal's API
	 * All values are auto encrypted AES RINDHJAEL 256
	 * Expects the following variables to be set:
	 * 		firstName		 -	Clients First Name
	 *  	laststName		 -	Clients Last Name
	 *    	creditCardType	 -	Clients Credit Card Type (Visa, Amex, Master, Discovery)
	 *      creditCardNumber -	Clients Credit Card Number
	 *      expDateMonth	 -	Credit Card Expiry Month / Must Be padded with leading zero: str_pad($expDateMonth, 2, '0', STR_PAD_LEFT);
	 *      expDateYear		 -	Credit Card Expiry year
	 *      cvv2Number		 -	Credit Card CVV2
	 *      address1		 -	Clients First Address
	 *      address2		 -	Clients Second Address (NULL / EMPTY is ok)
	 *      city			 -	Clients City
	 *      state			 -	Clients State / Province
	 *      zip				 -	Clients Zip / Postal Code
	 *      amount			 -	Order Amount
	 *      currencyCode	 -	Currency (defaults to USD - self::PAYPAL_API_DIRECTPAYMENT_CURRENCY_USD)
	 *      paymentType		 - Sale Payment Type  (defaults to Sale type - self::PAYPAL_API_DIRECTPAYMENT_TYPE_SALE)
	 *      
	 * @access public, final
	 * @param  none
	 * @return array - The directPayment response     
	 */
	public final function __doDirectPayment()
	{
		$blnContinue = (TRUE === empty(self::$_PAYPAL_API_ERROR_BIN));
		
		// Set 1: Validation
		if (TRUE === $blnContinue)
		{
			// Begin Validation
			$this->validateOrderBinData('firstName', 		'Missing First Name');
			$this->validateOrderBinData('laststName', 		'Missing Last Name');
			$this->validateOrderBinData('creditCardType', 	'Missing Credit Card Type');
			$this->validateOrderBinData('creditCardNumber', 'Missing Credit Card Number');
			$this->validateOrderBinData('expDateMonth', 	'Missing Credit Card Expiry Month');
			$this->validateOrderBinData('expDateYear', 		'Missing Credit Card Expiry Year');
			$this->validateOrderBinData('cvv2Number', 		'Missing Credit Card CVV2 Number');
			$this->validateOrderBinData('address1', 		'Missing Clients Address');
			$this->validateOrderBinData('city', 			'Missing Clients City');
			$this->validateOrderBinData('state', 			'Missing Clients State / Province');
			$this->validateOrderBinData('zip', 				'Missing Clients Zip / Postal Code');
			$this->validateOrderBinData('countryCode', 		'Missing Clients Country Code');
			$this->validateOrderBinData('amount', 			'Missing Order Amount');
			$this->validateOrderBinData('currencyCode', 	'Missing Order Currency Code');
			$this->validateOrderBinData('paymentType', 		'Missing Order Payment Type');
			
			$blnContinue = (TRUE === empty(self::$_PAYPAL_API_ERROR_BIN));
		}
		
		// Set 2: Processing
		if (TRUE === $blnContinue)
		{
			$this->APIRestPaypalCall();
		}
		
		return (self::$_PAYPAL_API_RESPONSE);
	}
	
	/**
	 * Returns the paypal errors
	 * 
	 * @access 	public
	 * @param	none
	 * @return  array
	 */
	public final function getErrors()
	{
		return (self::$_PAYPAL_API_ERROR_BIN);
	}
	
	/**
	 * Overload method
	 * Returns a paypal order variable
	 * 
	 * @access 	public
	 * @param 	string  $strVarName
	 * @return 	mixed 	$mxOrderValue
	 */
	public final function getVariable($strVarName = NULL) 
	{
		return (self::$_PAYPAL_AES_CRYPT->decrypt(parent::getVariable($strVarName, self::$_PAYPAL_ORDER_DATA_BIN)));
	}
	
   /**
	* Overload method
	* Sets a paypal order variable - Encrypted AES 256
	*
	* @access 	public
	* @param 	string  $strVarName
	* @param 	string  $strValue 
	* @return 	void
	*/
	public final function setVariable($strVarName, $strValue = NULL)
	{
		parent::setVariable($strVarName, self::$_PAYPAL_AES_CRYPT->encrypt($strValue), self::$_PAYPAL_ORDER_DATA_BIN);
	}
	
	
   /**
	* Overload method
	* Sets the encryptor object
	*
	* @access 	protected
	* @param 	none
	* @return 	void
	*/
	protected final function onBeforeGetInstance()
	{
		// 
		// Load the AES Crypto tool
		//
		$objCrypto = AES_CRYPTO::getInstance();
		$objCrypto->setEncryptionKey(__ENCRYPTION_KEY__);
		$objCrypto->setEncryptionBits(AES_CRYPTO::AES_CRYPTO_ENCRYPT_CIPHER_BITS_256);
		
		self::$_PAYPAL_AES_CRYPT = $objCrypto;
		
		//
		// Set the customers default order settings
		//
		self::setVariable('currencyCode', 	self::PAYPAL_API_DIRECTPAYMENT_CURRENCY_USD);
		self::setVariable('paymentType', 	self::PAYPAL_API_DIRECTPAYMENT_TYPE_SALE);
	}
	
	/**
	 * Validates that a given variable exists in the order bin
	 * 
	 * @param 	string 	$strVarName The variable name to check
	 * @param	string	$strErrorMessage The error message to add to the stack when fails	
	 * @return 	boolean
	 */
	protected final function validateOrderBinData($strVarName, $strErrorMessage = FALSE) 
	{
		$strVariableData = $this->getVariable($strVarName);
		
		if (
			(true === empty($strVariable)) &&
			(false === empty($strErrorMessage))	
		) {
			self::$_PAYPAL_API_ERROR_BIN[] = $strErrorMessage;
		}
		
		return ((bool) $strVariable);
	}
	
	/**
	 * This is the main method that executes the REST call to the PayPal server API
	 * 
	 * @access	protected, final
	 * @param	none
	 * @return  array
	 */
	protected final function APIRestPaypalCall()
	{
		$arrResponse = array();
		$blnContinue = function_exists('curl_init');
		
		if (FALSE === $blnContinue) 
		{
			self::$_PAYPAL_API_ERROR_BIN[] = 'cURL Extension is required to continue.';
		}
		
		
		if (TRUE === $blnContinue)
		{
			// Build the NVP request string:
			switch ($this->getPaymentType) 
			{
				case self::PAYPAL_API_DIRECTPAYMENT_TYPE_SALE :
				{
					$strNVPRequest  = '&PAYMENTACTION' 		. ($this->getPaymentType() == self::PAYPAL_API_DIRECTPAYMENT_TYPE_SALE ? 'Sale' : 'Authorization');
					$strNVPRequest .= '&EXPDATE=' 			. str_pad($this->getExpDateMonth(), 2, '0', STR_PAD_LEFT) . $this->getExpDateYear();
					$strNVPRequest .= '&AMT=' 				. $this->getAmount();
					$strNVPRequest .= '&CREDITCARDTYPE=' 	. $this->getCreditCardType();
					$strNVPRequest .= '&ACCT=' 				. $this->getCreditCardNumber();
					$strNVPRequest .= '&CVV2=' 				. $this->getCvv2Number();
					$strNVPRequest .= '&FIRSTNAME=' 		. $this->getFirstName();
					$strNVPRequest .= '&LASTNAME=' 			. $this->getLaststName();
					$strNVPRequest .= '&STREET=' 			. $this->getAddress1();
					$strNVPRequest .= '&CITY=' 				. $this->getCity();
					$strNVPRequest .= '&STATE=' 			. $this->getState();
					$strNVPRequest .= '&ZIP=' 				. $this->getZip();
					$strNVPRequest .= '&COUNTRYCODE=' 		. $this->getCountryCode();
					$strNVPRequest .= '&CURRENCYCODE=' 		. $this->getCurrencyCode();
					
					break;
				}
				
				case self::PAYPAL_API_DIRECTPAYMENT_TYPE_AUTHORIZATION : 
				{
					$strNVPRequest .= '&TRANSACTIONID=' 	. $this->getTransactionId();
					$strNVPRequest .= '&AMT=' 				. $this->getAmount();
					$strNVPRequest .= '&CURRENCYCODE=' 		. $this->getCurrencyCode();
					
					break;
				}
				
				
				//setting the curl parameters.
				$ch = curl_init();
				curl_setopt($ch, CURLOPT_URL, self::PAYPAL_API_ENPOINT);
				curl_setopt($ch, CURLOPT_VERBOSE, 1);
			
				//turning off the server and peer verification(TrustManager Concept).
				curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
				curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
			
				curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
				curl_setopt($ch, CURLOPT_POST, 1);
				
				
				//if USE_PROXY constant set to TRUE in Constants.php, then only proxy will be enabled.
			   	//Set proxy name to PROXY_HOST and port number to PROXY_PORT in constants.php 
				if(self::PAYPAL_API_USE_PROXY)
				{
					curl_setopt ($ch, CURLOPT_PROXY, self::PAYPAL_API_PROXY_HOST . ":" . self::PAYPAL_API_PROXY_PORT); 
				}
				
				//check if version is included in $nvpStr else include the version.
				if(strlen(str_replace('VERSION=', '', strtoupper($strNVPRequest))) == strlen($strNVPRequest)) 
				{
					$strNVPRequest = "&VERSION=" . urlencode(self::PAYPAL_API_VERSION) . $strNVPRequest;	
				}
				
				// Add the method name
				$strNVPRequest = "METHOD=" .urlencode($this->getPaymentType()) . $strNVPRequest;
		
				//setting the nvpreq as POST FIELD to curl
				curl_setopt($ch, CURLOPT_POSTFIELDS, $strNVPRequest);
			
				//getting response from server
				$objResponse = curl_exec($ch);
				
				// -- 
				// converting NVPResponse to an Associative Array
				self::$_PAYPAL_API_RESPONSE = $this->deformatNVPResponseKey($objResponse);
				// --
				
				// Dunno why we need this yet... {{
				$nvpReqArray = $this->deformatNVPResponseKey($strNVPRequest);
				$_SESSION['nvpReqArray']=$nvpReqArray;
				// }}
				
				if (curl_errno($ch)) 
				{
					
				}
				else 
				{
					// Close the cURL connection
					curl_close($ch);
				}
				if (curl_errno($ch)) {
					// moving to display page to display curl errors
					self::$_PAYPAL_API_ERROR_BIN[] = 'cURL Error (' . curl_errno($ch) . ') ' . curl_error($ch);
					/*
					  $location = "APIError.php";
					  header("Location: $location");
					*/  
				} else {
					//closing the curl
					curl_close($ch);
				}
			}
		}
		
		return (self::$_PAYPAL_API_RESPONSE);
	}
	
	
   /** 
    * This function will take NVPString and convert it to an Associative Array and it will decode the response.
    * It is usefull to search for a particular key and displaying arrays.
    * 
    * @access	protected, final
    * @param 	string	$strNVPResponseString The NVP Response string to parse
    * @return	array 	the parsed Associative Array.
    */
	protected final function deformatNVPResponseKey($strNVPResponseString)
	{
	
		$intial=0;
	 	$nvpArray = array();
	
	
		while(strlen($strNVPResponseString)){
			// postion of Key
			$keypos= strpos($strNVPResponseString,'=');
			
			// position of value
			$valuepos = strpos($strNVPResponseString,'&') ? strpos($strNVPResponseString,'&'): strlen($strNVPResponseString);
	
			// getting the Key and Value values and storing in a Associative Array
			$keyval=substr($strNVPResponseString,$intial,$keypos);
			$valval=substr($strNVPResponseString,$keypos+1,$valuepos-$keypos-1);
			
			// decoding the response
			$nvpArray[urldecode($keyval)] =urldecode( $valval);
			$strNVPResponseString=substr($strNVPResponseString,$valuepos+1,strlen($strNVPResponseString));
	     }
	     
		return ($nvpArray);
	}
}