/**
 * Due to bugs of jquert.touchwipe plugin on iOS 6 it was changed to cutom code partly taken from jquery.touchslider (http://touchslider.com)
 */

(function($) { 
   $.fn.touchwipe = function(settings) {
     var config = {
    		min_move_x: 20,
    		min_move_y: 20,
 			wipeLeft: function() { },
 			wipeRight: function() { },
 			wipeUp: function() { },
 			wipeDown: function() { },
			preventDefaultEvents: true,
			dtPreventX: false
	 };
     
     if (settings) $.extend(config, settings);
 
     this.each(function() {
     
		var	viewport = $(this),
			namespace = "dtTouch",
			touchstart = "touchstart",
			touchmove = "touchmove",
			touchend = "touchend",
			minSwipe = 80;
	
		var doc = $(document),
			startTime,
			defaultPrevented,
			moving = false, // if mouseup in stopPropogation area
			startPageX,
			previousPageX,
			distX,
			absDistX,
			startPageY,
			previousPageY,
			distY,
			absDistY,
	
			start = function(e) {
				if (e.which > 1) {
					return;
				}
	
				if (moving) {
					doc.triggerHandler(touchend + "." + namespace);
				}
	
				moving = true;
				defaultPrevented = false,
				startTime = e.timeStamp;
				distX = distY = 0;
	
				times = [0, 0, 0, startTime];
	
				// delegate to document for coorect touches length
				if (e.originalEvent.touches) {
					doc.one(touchstart, touchStart);
					return;
				}
	
				// no drag images
				e.preventDefault();
	
				startPageX = previousPageX = e.pageX;
				startPageY = previousPageY = e.pageY;
	
				coords = [0, 0, 0, startPageX];
	
				doc.bind(touchmove, move);
				doc.one(touchend + "." + namespace, end);
			},
	
			touchStart = function(e) {
				if (e.originalEvent.touches.length !== 1) {
					return;
				}
	
				startPageX = previousPageX = e.pageX = e.originalEvent.touches[0].pageX;
				startPageY = previousPageY = e.pageY = e.originalEvent.touches[0].pageY;
				absDistX = absDistY = 0;
	
				coords = [0, 0, 0, startPageX];
	
				doc.bind(touchmove, move);
				doc.one(touchend, end);
	
				//switching.moveStart(e);
			},
	
			move = function(e) {
				var pageX, pageY;
	
				if (e.originalEvent.touches) {
					if (e.originalEvent.touches.length !== 1) {
						return;
					}
	
					pageX = e.pageX = e.originalEvent.touches[0].pageX;
					pageY = e.pageY = e.originalEvent.touches[0].pageY;
	
					// iphone allow scrolling page
					absDistX += Math.abs(pageX - previousPageX);
					absDistY += Math.abs(pageY - previousPageY);
	
					// when long touching in one direction and then want to switch
					if (Math.abs(absDistX - absDistY) > 50) {
						var absDistXOld = absDistX;
						absDistX = Math.min(100, Math.max(0, absDistX - absDistY));
						absDistY = Math.min(100, Math.max(0, absDistY - absDistXOld));
					}
	
					if (pageX === previousPageX) {
						return;
					}
	
					// to scroll in a single direction
					if (!defaultPrevented) {
						if (absDistX > absDistY) {
							e.preventDefault();
							defaultPrevented = true;
						} else {
							end(e);
						}
					}
				} else {
					pageX = e.pageX;
					pageY = e.pageY;
	
					if (pageX === previousPageX) {
						return;
					}
	
					if ($.browser.msie) {
						e.preventDefault();
					}
				}
	
				distX += Math.abs(pageX - previousPageX);
				distY += Math.abs(pageY - previousPageY);
	
				previousPageX = pageX;
				previousPageY = pageY;
				
				if (defaultPrevented) {
					//console.log("dX: "+(startPageX - pageX));
				}
	
			},
	
			end = function(e) {
				moving = false;
				// mobile webkit browser fix
				if (!e.originalEvent || e.originalEvent.touches) {
					e.pageX = previousPageX;
					e.pageY = previousPageY;
				}
				doc.unbind(touchmove, move);
				
				var dX = startPageX - e.pageX;
				
				if ( defaultPrevented && (dX < -minSwipe) ) {
					//console.log("swipe back")
					config.wipeRight();
				} else if ( defaultPrevented && (dX > minSwipe) ) {
					//console.log("swipe forward");
					config.wipeLeft();
				}
	
				if (distX + distY > 4) {
					viewport.one("click", function(e) {
						e.preventDefault();
					});
				}
			};
	
		viewport.bind(touchstart, start); 
     });
 
     return this;
   };
 
 })(jQuery);